{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Game","props","state","isGamePlaying","num1","undefined","num2","answer","timerEnd","timerDuration","timerRatio","i","newAnswer","this","newState","setNewProblem","setState","clearInterval","tickHandle","setInterval","tickGame","Math","floor","random","Date","duration","timeLeft","num1Str","num2Str","answerStr","className","style","width","onClick","handleClick","startGame","renderProblem","renderTimer","renderKeypad","renderStartButton","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAkLeA,E,kDA9Kb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,eAAgB,EAChBC,UAAOC,EACPC,UAAOD,EACPE,YAASF,EACTG,cAAWH,EACXI,mBAAgBJ,EAChBK,gBAAaL,GATE,E,+CAcnB,SAAYM,GAEV,IAAIC,EAAYC,KAAKX,MAAMK,OAW3B,QAVkBF,IAAdO,EACO,IAAND,IACDC,EAAYD,GAGXC,EAAY,KACbA,EAAwB,GAAZA,EAAiBD,GAI9BC,IAAcC,KAAKX,MAAMK,OAAQ,CAClC,IAAIO,EAAQ,eAAOD,KAAKX,OACxBY,EAASP,OAASK,EAEfE,EAASP,SAAWO,EAASV,KAAOU,EAASR,KAC9CO,KAAKE,cAAcD,GACXF,GAAa,KACrBE,EAASP,YAASF,GAEpBQ,KAAKG,SAASF,M,uBAMlB,WACC,IAAD,OACMA,EAAQ,eAAOD,KAAKX,OACxBY,EAASX,eAAgB,EACzBc,cAAcJ,KAAKK,YACnBL,KAAKK,WAAaC,aAAY,kBAAK,EAAKC,aAAY,IACpDP,KAAKE,cAAcD,GACnBD,KAAKG,SAASF,K,2BAGhB,SAAcA,GAGZA,EAASV,KAAOiB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAChDT,EAASR,KAAOe,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAChDT,EAASP,YAASF,EAClBS,EAASN,UAAc,IAAIgB,KAAUC,IACrCX,EAASL,cALM,EAMfK,EAASJ,WAAa,I,sBAExB,WAEE,IAAII,EAAQ,eAAOD,KAAKX,OACpBwB,EAAWZ,EAASN,UAAc,IAAIgB,KACtCE,EAAW,GAEbZ,EAASJ,WAAa,EACtBI,EAASX,eAAgB,EACzBc,cAAcJ,KAAKK,aAInBJ,EAASJ,WAAagB,EAAWZ,EAASL,cAAgB,IAE5DI,KAAKG,SAASF,K,2BAIhB,WAEE,IAAIa,OAA8BtB,IAApBQ,KAAKX,MAAME,KAAqB,IAAMS,KAAKX,MAAME,KAC3DwB,OAA8BvB,IAApBQ,KAAKX,MAAMI,KAAqB,IAAMO,KAAKX,MAAMI,KAC3DuB,OAAkCxB,IAAtBQ,KAAKX,MAAMK,OAAuB,IAAMM,KAAKX,MAAMK,OAEnE,OACE,sBAAKuB,UAAU,UAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sBAAMA,UAAU,WAAhB,SAA4BH,MAE9B,qBAAKG,UAAU,UAAf,SAA0B,SAC1B,qBAAKA,UAAU,MAAf,SACE,sBAAMA,UAAU,WAAhB,SAA4BF,MAE9B,qBAAKE,UAAU,UAAf,SAA0B,MAC1B,qBAAKA,UAAU,MAAf,SACE,sBAAMA,UAAU,WAAhB,SAA4BD,W,yBAOpC,WAEE,OACA,qBAAKC,UAAU,QAAf,SACE,qBAAKA,UAAU,cAAcC,MAAO,CAAEC,MAAiC,IAAxBnB,KAAKX,MAAMQ,WAAoB,W,0BAKlF,WACC,IAAD,OACE,OACA,sBAAKoB,UAAU,QAAf,UACE,sBAAKA,UAAU,YAAf,UACE,wBAAQA,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,kBAEF,sBAAKJ,UAAU,YAAf,UACE,wBAAQA,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,kBAEF,sBAAKJ,UAAU,YAAf,UACE,wBAAQA,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,kBAEF,sBAAKJ,UAAU,YAAf,UACE,wBAAQA,UAAU,eAAeG,QAAS,eAC1C,wBAAQH,UAAU,eAAeG,QAAS,kBAAM,EAAKC,YAAY,IAAjE,eACA,wBAAQJ,UAAU,eAAeG,QAAS,uB,+BAMhD,WACC,IAAD,OACE,OACE,qBAAKH,UAAU,QAAf,SACE,wBAAQA,UAAU,eAAeG,QAAS,kBAAM,EAAKE,aAArD,uB,oBAKN,WACE,OAAGtB,KAAKX,MAAMC,cAGV,sBAAK2B,UAAU,OAAf,UACIjB,KAAKuB,gBACLvB,KAAKwB,cACLxB,KAAKyB,kBAOT,sBAAKR,UAAU,OAAf,UACIjB,KAAKuB,gBACLvB,KAAK0B,2B,GAvKEC,IAAMC,WCSVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d0bfdea.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGamePlaying : false,\n      num1 : undefined,\n      num2 : undefined,\n      answer : undefined,\n      timerEnd : undefined,\n      timerDuration : undefined,\n      timerRatio : undefined,\n    };\n    //this.timer = setInterval(()=> this.updateTimer(), 100);\n    \n  }\n  handleClick(i) {\n    \n    let newAnswer = this.state.answer;\n    if (newAnswer === undefined) {\n      if(i !== 0) {\n        newAnswer = i;\n      } \n    } else {\n      if(newAnswer < 10) {\n        newAnswer = newAnswer * 10 + i;\n      }\n    }\n\n    if(newAnswer !== this.state.answer) {\n      let newState = {...this.state};\n      newState.answer = newAnswer;\n        \n      if(newState.answer === newState.num1 * newState.num2) {\n        this.setNewProblem(newState);\n      } else if(newAnswer >= 10) {\n        newState.answer = undefined;\n      }\n      this.setState(newState);\n    }\n    \n\n    \n  }\n  startGame()\n  {\n    let newState = {...this.state};\n    newState.isGamePlaying = true;\n    clearInterval(this.tickHandle);\n    this.tickHandle = setInterval(()=> this.tickGame(), 30);\n    this.setNewProblem(newState);    \n    this.setState(newState);\n  }\n\n  setNewProblem(newState)\n  {\n    let duration = 5.0;\n    newState.num1 = Math.floor(Math.random() * 8) + 2;\n    newState.num2 = Math.floor(Math.random() * 9) + 1;\n    newState.answer = undefined;\n    newState.timerEnd = (+ new Date()) + duration * 1000;\n    newState.timerDuration = duration;\n    newState.timerRatio = 1.0;\n  }\n  tickGame()\n  {\n    let newState = {...this.state};\n    let timeLeft = newState.timerEnd - (+ new Date());\n    if (timeLeft < 0)\n    {\n      newState.timerRatio = 0;\n      newState.isGamePlaying = false;\n      clearInterval(this.tickHandle);\n    }\n    else\n    {\n      newState.timerRatio = timeLeft / newState.timerDuration / 1000;\n    }    \n    this.setState(newState);\n  }\n\n\n  renderProblem()\n  { \n    let num1Str = this.state.num1 === undefined ? \"?\" : this.state.num1; \n    let num2Str = this.state.num2 === undefined ? \"?\" : this.state.num2; \n    let answerStr = this.state.answer === undefined ? \"?\" : this.state.answer; \n\n    return ( \n      <div className=\"problem\">\n        <div className=\"box\">\n          <span className=\"text-num\">{num1Str}</span>\n        </div>\n        <div className=\"text-op\">{\"Ã—\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{num2Str}</span>\n        </div>\n        <div className=\"text-op\">{\"=\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{answerStr}</span>\n        </div>\n      </div>\n    );\n  }\n\n\n  renderTimer()\n  {        \n    return (\n    <div className=\"timer\">\n      <div className=\"timer-gauge\" style={{ width: ((this.state.timerRatio * 100) + \"%\") }}/>\n    </div>\n    );\n  }\n\n  renderKeypad()\n  {\n    return (\n    <div className=\"input\">\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClick(7)}>7</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(8)}>8</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(9)}>9</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClick(4)}>4</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(5)}>5</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(6)}>6</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClick(1)}>1</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(2)}>2</button>\n        <button className=\"input-button\" onClick={() => this.handleClick(3)}>3</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => {}}></button>\n        <button className=\"input-button\" onClick={() => this.handleClick(0)}>0</button>\n        <button className=\"input-button\" onClick={() => {}}></button>\n      </div>\n    </div>\n    );\n  }\n\n  renderStartButton()\n  {\n    return (\n      <div className=\"input\">\n        <button className=\"start-button\" onClick={() => this.startGame()}>Start</button>\n      </div>\n    );\n  }\n\n  render() {\n    if(this.state.isGamePlaying)\n    {\n      return (\n        <div className=\"game\">\n          { this.renderProblem() }\n          { this.renderTimer() }\n          { this.renderKeypad() }        \n        </div>\n      );\n    }\n    else\n    {\n      return (\n        <div className=\"game\">\n          { this.renderProblem() }\n          { this.renderStartButton() }        \n        </div>\n      );\n  \n    }\n  }\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}