{"version":3,"sources":["audioclip/beep.wav","audioclip/correct.wav","audioclip/fail.mp3","audioclip/wrong.mp3","App.js","reportWebVitals.js","index.js"],"names":["beepSound","Audio","beepSoundFile","correctSound","correctSoundFile","failSound","failSoundFile","wrongSound","wrongSoundFile","difficultySettings","timer","showNum1","showNum2","multiplier","next","undefined","GameState","Game","props","state","gameState","num1","num2","answer","timerLeft","difficulty","score_count","score_time","tickHandle","lastTickTime","Date","i","this","newAnswer","newState","Math","floor","play","setTimeout","setNewProblem","setState","setInterval","tickGame","random","now","deltaTime","clearInterval","levelStr","scoreStr","className","num1Str","num2Str","answerStr","ratio","style","width","onClick","handleClickNumber","count","handleClickStart","renderScore","renderProblem","renderStartButton","renderTimer","renderKeypad","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28895ee3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/beep.46cb8f99.wav\";","export default __webpack_public_path__ + \"static/media/correct.d875afe6.wav\";","export default __webpack_public_path__ + \"static/media/fail.38cda430.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.0afb49d7.mp3\";","import React from 'react';\nimport './App.css';\nimport beepSoundFile from './audioclip/beep.wav';\nimport correctSoundFile from './audioclip/correct.wav';\nimport failSoundFile from './audioclip/fail.mp3';\nimport wrongSoundFile from './audioclip/wrong.mp3';\n\nconst beepSound = new Audio(beepSoundFile);\nconst correctSound = new Audio(correctSoundFile);\nconst failSound = new Audio(failSoundFile);\nconst wrongSound = new Audio(wrongSoundFile);\n\nconst difficultySettings = [\n  { \n    timer : 8000,\n    showNum1 : 1000,\n    showNum2 : 2000, \n    multiplier : 0.3,\n    next : 8000,   \n  },\n  { \n    timer : 5000,\n    showNum1 : 700,\n    showNum2 : 1500,    \n    multiplier : 0.7,\n    next : 16000,   \n  },\n  { \n    timer : 3000,\n    showNum1 : 500,\n    showNum2 : 1000,    \n    multiplier : 1.2,\n    next : undefined,   \n  },\n];\n\nconst GameState = {\n  initial : \"initial\",\n  waitingGameStart : \"waitingGameStart\",\n  waitingNum1 : \"waitingNum1\",\n  waitingNum2 : \"waitingNum2\",\n  waitingAnswer : \"waitingAnswer\",\n  correctPlaying : \"correctPlaying\",\n  gameFinished : \"gameFinished\",\n};\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameState : GameState.initial,\n      num1 : undefined,\n      num2 : undefined,\n      answer : undefined,\n      timerLeft : undefined,\n      difficulty : 0,\n      score_count : 0,\n      score_time : 0,\n    };\n    this.tickHandle = undefined;\n    this.lastTickTime = (+ new Date());\n\n  }\n  handleClickNumber(i) {    \n    if(this.state.gameState !== GameState.waitingAnswer)\n    {\n      return;\n    }\n\n    let newAnswer = this.state.answer;\n    if (newAnswer === undefined) {\n      if(i !== 0) {\n        newAnswer = i;\n      } \n    } else {\n      if(newAnswer < 10) {\n        newAnswer = newAnswer * 10 + i;\n      }\n    }\n\n    if(newAnswer !== this.state.answer) {\n      let newState = {...this.state};\n      newState.answer = newAnswer;\n        \n      if(newState.answer === newState.num1 * newState.num2) {\n        const difficulty = difficultySettings[this.state.difficulty];\n\n        newState.gameState = GameState.correctPlaying;\n        newState.score_count += 1;\n        newState.score_time += Math.floor(newState.timerLeft * difficulty.multiplier);\n\n        if(difficulty.next < newState.score_time)\n        {\n          newState.difficulty += 1;\n        }\n\n        correctSound.play();\n        setTimeout(() => {\n          let newState = {...this.state};\n          this.setNewProblem(newState);\n          this.setState(newState);\n        }, 500);\n      } else if(newAnswer >= 10) {\n        wrongSound.play();\n        newState.answer = undefined;\n      }\n      this.setState(newState);\n    }\n  }\n  handleClickStart()\n  {\n    if(this.state.gameState === GameState.waitingGameStart) {\n      let newState = {...this.state};\n      newState.timerLeft -= 1000;\n      this.setState(newState);\n    } else {\n      let newState = {...this.state};\n      newState.gameState = GameState.waitingGameStart;\n      newState.timerLeft = 3000;\n      this.setState(newState);\n    }\n\n    if(this.tickHandle === undefined) {      \n      this.lastTickTime = (+ new Date());\n      this.tickHandle = setInterval(()=> this.tickGame(), 70);\n    }\n  }\n  setNewProblem(newState)\n  {\n    const difficulty = difficultySettings[this.state.difficulty];\n\n    newState.gameState = GameState.waitingNum1;\n    newState.num1 = Math.floor(Math.random() * 8) + 2;\n    newState.num2 = Math.floor(Math.random() * 9) + 1;\n    newState.answer = undefined;\n    newState.timerLeft = difficulty.timer;\n  }\n  tickGame()\n  {\n    let now = (+ new Date());\n    let deltaTime = now - this.lastTickTime;\n    this.lastTickTime = now;\n\n    let newState = {...this.state};\n\n    if (newState.gameState === GameState.waitingGameStart) {\n      newState.timerLeft -= deltaTime;\n      if (newState.timerLeft < 0.0) {\n        //게임 시작\n        newState.difficulty = 0;\n        newState.score_count = 0;\n        newState.score_time = 0;\n        this.setNewProblem(newState);    \n      }\n    } else if(newState.gameState === GameState.correctPlaying) {\n\n    } else {\n      newState.timerLeft -= deltaTime;\n      const difficulty = difficultySettings[this.state.difficulty];\n      if (newState.gameState === GameState.waitingNum1) {\n        if(difficulty.showNum1 < difficulty.timer - newState.timerLeft) {\n          beepSound.play();\n          newState.gameState = GameState.waitingNum2;\n        }\n      } else if (newState.gameState === GameState.waitingNum2) {\n        if(difficulty.showNum2 < difficulty.timer - newState.timerLeft) {\n          beepSound.play();\n          newState.gameState = GameState.waitingAnswer;\n        }\n      } else if (newState.gameState === GameState.waitingAnswer) {\n        if (newState.timerLeft < 0.0)\n        {\n          //게임 종료\n          failSound.play();\n          newState.timerLeft = undefined;\n          newState.gameState = GameState.gameFinished;\n          newState.answer = newState.num1 * newState.num2;\n          clearInterval(this.tickHandle);\n          this.tickHandle = undefined;\n        }\n      }\n    }\n    this.setState(newState);\n  }\n\n  renderScore()\n  {  \n    const levelStr = this.state.difficulty + 1;\n    const scoreStr = this.state.score_time;\n\n\n\n    return (\n    <div className=\"score\">\n      <span className=\"text-level\">Level : {levelStr}</span>\n      <span className=\"text-score\">Score : {scoreStr}</span>\n    </div>\n    );\n  }\n\n  renderProblem()\n  { \n    let num1Str = this.state.num1 === undefined ? \"?\" : this.state.num1; \n    let num2Str = this.state.num2 === undefined ? \"?\" : this.state.num2; \n    let answerStr = this.state.answer === undefined ? \"?\" : this.state.answer; \n\n    if(this.state.gameState === GameState.waitingNum1)    \n    {\n      num1Str = \"?\";\n      num2Str = \"?\";\n    }\n    else if(this.state.gameState === GameState.waitingNum2)    \n    {\n      num2Str = \"?\";\n    }\n\n    return ( \n      <div className=\"problem\">\n        <div className=\"box\">\n          <span className=\"text-num\">{num1Str}</span>\n        </div>\n        <div className=\"text-op\">{\"×\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{num2Str}</span>\n        </div>\n        <div className=\"text-op\">{\"=\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{answerStr}</span>\n        </div>\n      </div>\n    );\n  }\n\n\n  renderTimer()\n  {  \n    const difficulty = difficultySettings[this.state.difficulty];   \n    let ratio = this.state.timerLeft / difficulty.timer * 100;  \n    return (\n    <div className=\"timer\">\n      <div className=\"timer-gauge\" style={{ width: (ratio + \"%\") }}/>\n    </div>\n    );\n  }\n\n  renderKeypad()\n  {\n    return (\n    <div className=\"input\">\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(7)}>7</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(8)}>8</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(9)}>9</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(4)}>4</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(5)}>5</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(6)}>6</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(1)}>1</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(2)}>2</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(3)}>3</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => {}}></button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(0)}>0</button>\n        <button className=\"input-button\" onClick={() => {}}></button>\n      </div>\n    </div>\n    );\n  }\n\n  renderStartButton()\n  {\n    if (this.state.gameState === GameState.waitingGameStart) {\n      let count = Math.floor(this.state.timerLeft / 1000) + 1;\n      return (\n        <div className=\"input\">\n          <button className=\"start-button\" onClick={() => this.handleClickStart()}>{count}</button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"input\">\n          <button className=\"start-button\" onClick={() => this.handleClickStart()}>Start</button>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    if(this.state.gameState === GameState.initial ||\n       this.state.gameState === GameState.waitingGameStart ||\n       this.state.gameState === GameState.gameFinished) \n    {\n      return (\n        <div className=\"game\">\n          { this.renderScore() }\n          { this.renderProblem() }\n          { this.renderStartButton() }        \n        </div>\n      );\n    }\n    else\n    {\n      return (\n        <div className=\"game\">\n          { this.renderScore() }\n          { this.renderProblem() }\n          { this.renderTimer() }\n          { this.renderKeypad() }        \n        </div>\n      );\n    }\n  }\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}