{"version":3,"sources":["audioclip/correct.wav","audioclip/fail.mp3","audioclip/wrong.mp3","App.js","reportWebVitals.js","index.js"],"names":["correctSound","Audio","correctSoundFile","failSound","failSoundFile","wrongSound","wrongSoundFile","Game","props","state","isGamePlaying","waitingGameStart","undefined","num1","num2","answer","correctPlaying","timerDuration","timerLeft","tickHandle","lastTickTime","Date","i","this","newAnswer","newState","play","setTimeout","setNewProblem","setState","setInterval","tickGame","Math","floor","random","timerEnd","duration","now","deltaTime","clearInterval","num1Str","num2Str","answerStr","className","ratio","style","width","onClick","handleClickNumber","handleClickStart","count","renderProblem","renderTimer","renderKeypad","renderStartButton","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fc53645.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/correct.d875afe6.wav\";","export default __webpack_public_path__ + \"static/media/fail.38cda430.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.0afb49d7.mp3\";","import React from 'react';\nimport './App.css';\nimport correctSoundFile from './audioclip/correct.wav';\nimport failSoundFile from './audioclip/fail.mp3';\nimport wrongSoundFile from './audioclip/wrong.mp3';\n\nvar correctSound = new Audio(correctSoundFile);\nvar failSound = new Audio(failSoundFile);\nvar wrongSound = new Audio(wrongSoundFile);\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGamePlaying : false,\n      waitingGameStart : undefined,\n      num1 : undefined,\n      num2 : undefined,\n      answer : undefined,\n      correctPlaying : false,\n      timerDuration : undefined,\n      timerLeft : undefined,\n    };\n    this.tickHandle = undefined;\n    this.lastTickTime = (+ new Date());\n\n  }\n  handleClickNumber(i) {    \n    if(this.state.correctPlaying)\n    {\n      return;\n    }\n\n    let newAnswer = this.state.answer;\n    if (newAnswer === undefined) {\n      if(i !== 0) {\n        newAnswer = i;\n      } \n    } else {\n      if(newAnswer < 10) {\n        newAnswer = newAnswer * 10 + i;\n      }\n    }\n\n    if(newAnswer !== this.state.answer) {\n      let newState = {...this.state};\n      newState.answer = newAnswer;\n        \n      if(newState.answer === newState.num1 * newState.num2) {\n        newState.correctPlaying = true;\n        correctSound.play();\n        setTimeout(() => {\n          let newState = {...this.state};\n          newState.correctPlaying = false;\n          this.setNewProblem(newState);\n          this.setState(newState);\n        }, 500);\n      } else if(newAnswer >= 10) {\n        wrongSound.play();\n        newState.answer = undefined;\n      }\n      this.setState(newState);\n    }\n  }\n  handleClickStart()\n  {\n    if(this.state.waitingGameStart === undefined) {\n      let newState = {...this.state};\n      newState.isGamePlaying = false;\n      newState.waitingGameStart = 3000;\n      this.setState(newState);\n    }\n    else\n    {\n      let newState = {...this.state};\n      newState.isGamePlaying = false;\n      newState.waitingGameStart -= 1000;\n      this.setState(newState);\n    }\n\n    if(this.tickHandle === undefined) {      \n      this.lastTickTime = (+ new Date());\n      this.tickHandle = setInterval(()=> this.tickGame(), 30);\n    }\n  }\n\n  \n\n\n  setNewProblem(newState)\n  {\n    let duration = 5.0;\n    newState.num1 = Math.floor(Math.random() * 8) + 2;\n    newState.num2 = Math.floor(Math.random() * 9) + 1;\n    newState.answer = undefined;\n    newState.timerEnd = (+ new Date()) + duration * 1000;\n    newState.timerDuration = duration * 1000;\n    newState.timerLeft = duration * 1000;\n  }\n  tickGame()\n  {\n    let now = (+ new Date());\n    let deltaTime = now - this.lastTickTime;\n    this.lastTickTime = now;\n\n    let newState = {...this.state};\n\n    if (newState.isGamePlaying === false) {\n      if (newState.waitingGameStart === undefined) {\n        //여기로 들어오면 안된다.\n        clearInterval(this.tickHandle);\n      } else {\n        newState.waitingGameStart -= deltaTime;\n        if (newState.waitingGameStart < 0.0) {\n          //게임 시작\n          newState.isGamePlaying = true;\n          newState.waitingGameStart = undefined;\n          this.setNewProblem(newState);    \n        }\n      }\n    } else if (newState.correctPlaying === false) {\n      newState.timerLeft -= deltaTime;\n      if (newState.timerLeft < 0.0)\n      {\n        //게임 종료\n        failSound.play();\n        newState.timerLeft = 0.0;\n        newState.isGamePlaying = false;\n        clearInterval(this.tickHandle);\n        this.tickHandle = undefined;\n      }\n    }\n    this.setState(newState);\n  }\n\n\n  renderProblem()\n  { \n    let num1Str = this.state.num1 === undefined ? \"?\" : this.state.num1; \n    let num2Str = this.state.num2 === undefined ? \"?\" : this.state.num2; \n    let answerStr = this.state.answer === undefined ? \"?\" : this.state.answer; \n\n    return ( \n      <div className=\"problem\">\n        <div className=\"box\">\n          <span className=\"text-num\">{num1Str}</span>\n        </div>\n        <div className=\"text-op\">{\"×\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{num2Str}</span>\n        </div>\n        <div className=\"text-op\">{\"=\"}</div>\n        <div className=\"box\">\n          <span className=\"text-num\">{answerStr}</span>\n        </div>\n      </div>\n    );\n  }\n\n\n  renderTimer()\n  {     \n    let ratio = this.state.timerLeft / this.state.timerDuration * 100;  \n    return (\n    <div className=\"timer\">\n      <div className=\"timer-gauge\" style={{ width: (ratio + \"%\") }}/>\n    </div>\n    );\n  }\n\n  renderKeypad()\n  {\n    return (\n    <div className=\"input\">\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(7)}>7</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(8)}>8</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(9)}>9</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(4)}>4</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(5)}>5</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(6)}>6</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(1)}>1</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(2)}>2</button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(3)}>3</button>\n      </div>\n      <div className=\"input-row\">\n        <button className=\"input-button\" onClick={() => {}}></button>\n        <button className=\"input-button\" onClick={() => this.handleClickNumber(0)}>0</button>\n        <button className=\"input-button\" onClick={() => {}}></button>\n      </div>\n    </div>\n    );\n  }\n\n  renderStartButton()\n  {\n    if (this.state.waitingGameStart === undefined) {\n      return (\n        <div className=\"input\">\n          <button className=\"start-button\" onClick={() => this.handleClickStart()}>Start</button>\n        </div>\n      );\n    } else {\n      let count = Math.floor(this.state.waitingGameStart / 1000) + 1;\n      return (\n        <div className=\"input\">\n          <button className=\"start-button\" onClick={() => this.handleClickStart()}>{count}</button>\n        </div>\n      );\n\n    }\n  }\n\n  render() {\n    if(this.state.isGamePlaying)\n    {\n      return (\n        <div className=\"game\">\n          { this.renderProblem() }\n          { this.renderTimer() }\n          { this.renderKeypad() }        \n        </div>\n      );\n    }\n    else\n    {\n      return (\n        <div className=\"game\">\n          { this.renderProblem() }\n          { this.renderStartButton() }        \n        </div>\n      );\n  \n    }\n  }\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}